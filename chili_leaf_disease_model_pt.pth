import torch
import torch.nn as nn
import torch.optim as optim

# Contoh arsitektur model sederhana
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, 3, 1)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(32 * 62 * 62, 128)  # Sesuaikan ukuran input dengan dimensi input gambar
        self.fc2 = nn.Linear(128, 3)  # Misalnya untuk 3 kelas

    def forward(self, x):
        x = self.pool(torch.relu(self.conv1(x)))
        x = x.view(-1, 32 * 62 * 62)  # Sesuaikan ukuran ini dengan output layer
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Inisialisasi model, loss function, dan optimizer
model = SimpleCNN()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Misalnya trainloader adalah DataLoader untuk data pelatihan
# for epoch in range(10):
#     for data, labels in trainloader:
#         optimizer.zero_grad()
#         outputs = model(data)
#         loss = criterion(outputs, labels)
#         loss.backward()
#         optimizer.step()

# Menyimpan model dalam format .pt
torch.save(model.state_dict(), 'chili_leaf_disease_model_pt.pth')
